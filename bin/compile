#!/usr/bin/env bash

# fail fast
set -e

# bin/compile <build-dir> <cache-dir>
build_dir=$1
cache_dir=$2

# Expected steps in k.build file
## 1. Install Mono >= 3.4.1 (3.8.0 recommended)
## 2. Install KVM
## 3. Install KRE
## 4. Prepare Procfile
##    Ex: {
##      echo "web: k web" > $build_dir/Procfile
##    }


# kbuild sample usage ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# -----------------------------------------------------------

# 1. Install Mono >= 3.4.1 (3.8.0 recommended)
########## https://github.com/friism/heroku-buildpack-mono/blob/master/bin/compile
DEPENDENCY_S3_BUCKET_PATH="http://heroku-mono-vnext-build.s3-eu-west-1.amazonaws.com"
MONO_VERSION="8de00a1"
STACK="cedar-14"

arrow() {
  while read line; do
    echo "-----> ${line}"
  done
}

indent() {
  while read line; do
    echo "       ${line}"
  done
}

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "Downloading ${DOWNLOAD_URL}" | arrow
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

LP_DIR=`cd $(dirname $0); cd ..; pwd`

echo "LP_DIR:" | arrow
echo "$LP_DIR" | indent


echo "cache_dir:" | arrow
echo "${cache_dir}" | indent

cd ${build_dir}
mkdir -p ${cache_dir}

MONO_CACHE_LOCATION=${cache_dir}/${STACK}/mono-${MONO_VERSION}
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION}

# Copy mono from cache to where we're building the slug
cp -r "${MONO_CACHE_LOCATION}/mono" .
# Mono expects to be running out of /app
ln -s "${build_dir}/mono" /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

echo "MONO VERSION:" | arrow
mono --version | indent

# Copy mono to packages
mkdir -p /app/.packages
cp -r /app/mono /app/.packages/.

echo "Updating SSL certificates..." | arrow
mozroots --import --sync | indent
yes | certmgr -ssl "https://www.myget.org" | indent
yes | certmgr -ssl "https://www.nuget.org" | indent

# 2. Install DNVM

#Create ~/.bash_profile
echo "Create ~/.bash_profile" | arrow
touch ~/.bash_profile
echo "...done" | indent

echo "Install DNVM..." | arrow
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh
source ~/.dnx/dnvm/dnvm.sh


# 3. Install DNX
echo "Install DNX..." | arrow
dnvm upgrade | indent

echo "Copy DNX to build directory..." | indent
echo "cp ~/.bash_profile ${build_dir}/.bash_profile"
echo "cp -r ~/.dnx ${build_dir}/."
cp ~/.bash_profile ${build_dir}/.bash_profile
cp -r ~/.dnx ${build_dir}/.


echo "Checking for NuGet.config" | arrow
if [ ! -f ~/.config/NuGet/NuGet.config ]; then
    echo "~/.config/NuGet/NuGet.config not found, creating..." | indent
    mkdir -p ~/.config/NuGet
    touch ~/.config/NuGet/NuGet.config
    
    echo -e "<?xml version=\"1.0\" encoding=\"utf-8\"?>" > ~/.config/NuGet/NuGet.config
    echo -e "<configuration>" >> ~/.config/NuGet/NuGet.config
    echo -e "  <packageSources>" >> ~/.config/NuGet/NuGet.config
    echo -e "    <add key=\"AspNetVNext\" value=\"http://www.myget.org/F/aspnetvnext/api/v2/\" />" >> ~/.config/NuGet/NuGet.config
    echo -e "    <add key=\"nuget.org\" value=\"http://www.nuget.org/api/v2/\" />" >> ~/.config/NuGet/NuGet.config
    echo -e "  </packageSources>" >> ~/.config/NuGet/NuGet.config
    echo -e "  <disabledPackageSources />" >> ~/.config/NuGet/NuGet.config
    echo -e "</configuration>" >> ~/.config/NuGet/NuGet.config
else
    echo "Found ~/.config/NuGet/NuGet.config" | indent
    cat ~/.config/NuGet/NuGet.config | indent
fi

# 3.1 Restore project packages...
echo "Restore project packages..." | arrow
dnu restore | indent

# 4. Prepare Procfile
echo "Creating Procfile..." | arrow
echo "${build_dir}/Procfile" | indent

echo "web: dnx . run" > $build_dir/Procfile

echo "Procfile CAT..." | arrow
cat $build_dir/Procfile | indent

# default Procfile
#if [ ! -r $build_dir/Procfile ]; then
#    echo "       No Procfile; using \"web: sh k web --server.urls http://0.0.0.0:80\"."
#    echo "web: sh k web --server.urls http://0.0.0.0:80" > $build_dir/Procfile
#fi

echo "Build SUCCESS" | arrow